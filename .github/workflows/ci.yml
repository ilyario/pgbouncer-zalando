name: Build and Push PgBouncer Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Запуск каждый день в 2:00 UTC для проверки обновлений
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'PgBouncer version to build'
        required: false
        default: 'master-32'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Get latest PgBouncer version
      id: pgbouncer-version
      run: |
        # Get latest version from Docker Hub or use provided version
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Can add logic to get latest version
          # For now use default version
          echo "version=master-32" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          PGBOUNCER_VERSION=${{ steps.pgbouncer-version.outputs.version }}
          SSL_MODE=prefer
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push with latest tag
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        build-args: |
          PGBOUNCER_VERSION=${{ steps.pgbouncer-version.outputs.version }}
          SSL_MODE=prefer
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest PgBouncer version
      id: pgbouncer-version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=master-32" >> $GITHUB_OUTPUT
        fi

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: test-pgbouncer:latest
        build-args: |
          PGBOUNCER_VERSION=${{ steps.pgbouncer-version.outputs.version }}
          SSL_MODE=prefer

    - name: Test PgBouncer container
      run: |
        # Start container in background
        docker run -d --name test-pgbouncer test-pgbouncer:latest

        # Wait a bit for startup
        sleep 10

        # Check if container is running
        if docker ps | grep -q test-pgbouncer; then
          echo "✅ PgBouncer container is running successfully"
        else
          echo "❌ PgBouncer container failed to start"
          docker logs test-pgbouncer
          exit 1
        fi

        # Cleanup
        docker stop test-pgbouncer
        docker rm test-pgbouncer
